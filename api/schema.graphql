# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Product {
  id: ID!
  name: String
  isFeatured: Boolean
  slug: String
  description: String
  filters: JSON
  thumbnail: String
  sizingCharts: JSON
  printfulProductId: String
  category: Category
  priceRange: [Float]
  firstVariant: Variant
  variants(where: VariantWhereInput! = {}, orderBy: [VariantOrderByInput!]! = [], take: Int, skip: Int! = 0): [Variant!]
  variantsCount(where: VariantWhereInput! = {}): Int
}

input ProductWhereUniqueInput {
  id: ID
  slug: String
  printfulProductId: String
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  isFeatured: BooleanFilter
  slug: StringFilter
  description: StringFilter
  thumbnail: StringFilter
  printfulProductId: StringFilter
  category: CategoryWhereInput
  variants: VariantManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input VariantManyRelationFilter {
  every: VariantWhereInput
  some: VariantWhereInput
  none: VariantWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  isFeatured: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  thumbnail: OrderDirection
  printfulProductId: OrderDirection
}

input ProductUpdateInput {
  name: String
  isFeatured: Boolean
  slug: String
  description: String
  filters: JSON
  thumbnail: String
  sizingCharts: JSON
  printfulProductId: String
  category: CategoryRelateToOneForUpdateInput
  variants: VariantRelateToManyForUpdateInput
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input VariantRelateToManyForUpdateInput {
  disconnect: [VariantWhereUniqueInput!]
  set: [VariantWhereUniqueInput!]
  create: [VariantCreateInput!]
  connect: [VariantWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  isFeatured: Boolean
  slug: String
  description: String
  filters: JSON
  thumbnail: String
  sizingCharts: JSON
  printfulProductId: String
  category: CategoryRelateToOneForCreateInput
  variants: VariantRelateToManyForCreateInput
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input VariantRelateToManyForCreateInput {
  create: [VariantCreateInput!]
  connect: [VariantWhereUniqueInput!]
}

type Variant {
  id: ID!
  permalink: String
  printfulVariantId: String
  details: JSON
  product: Product
}

input VariantWhereUniqueInput {
  id: ID
  printfulVariantId: String
}

input VariantWhereInput {
  AND: [VariantWhereInput!]
  OR: [VariantWhereInput!]
  NOT: [VariantWhereInput!]
  id: IDFilter
  printfulVariantId: StringFilter
  product: ProductWhereInput
}

input VariantOrderByInput {
  id: OrderDirection
  printfulVariantId: OrderDirection
}

input VariantUpdateInput {
  printfulVariantId: String
  details: JSON
  product: ProductRelateToOneForUpdateInput
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input VariantUpdateArgs {
  where: VariantWhereUniqueInput!
  data: VariantUpdateInput!
}

input VariantCreateInput {
  printfulVariantId: String
  details: JSON
  product: ProductRelateToOneForCreateInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type Category {
  id: ID!
  name: String
  slug: String
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
  slug: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  products: ProductManyRelationFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input CategoryUpdateInput {
  name: String
  slug: String
  products: ProductRelateToManyForUpdateInput
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  slug: String
  products: ProductRelateToManyForCreateInput
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type ProcessedOrder {
  id: ID!
  idempotency_key: String
}

input ProcessedOrderWhereUniqueInput {
  id: ID
  idempotency_key: String
}

input ProcessedOrderWhereInput {
  AND: [ProcessedOrderWhereInput!]
  OR: [ProcessedOrderWhereInput!]
  NOT: [ProcessedOrderWhereInput!]
  id: IDFilter
  idempotency_key: StringFilter
}

input ProcessedOrderOrderByInput {
  id: OrderDirection
  idempotency_key: OrderDirection
}

input ProcessedOrderUpdateInput {
  idempotency_key: String
}

input ProcessedOrderUpdateArgs {
  where: ProcessedOrderWhereUniqueInput!
  data: ProcessedOrderUpdateInput!
}

input ProcessedOrderCreateInput {
  idempotency_key: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(where: ProductWhereUniqueInput!, data: ProductUpdateInput!): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createVariant(data: VariantCreateInput!): Variant
  createVariants(data: [VariantCreateInput!]!): [Variant]
  updateVariant(where: VariantWhereUniqueInput!, data: VariantUpdateInput!): Variant
  updateVariants(data: [VariantUpdateArgs!]!): [Variant]
  deleteVariant(where: VariantWhereUniqueInput!): Variant
  deleteVariants(where: [VariantWhereUniqueInput!]!): [Variant]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createProcessedOrder(data: ProcessedOrderCreateInput!): ProcessedOrder
  createProcessedOrders(data: [ProcessedOrderCreateInput!]!): [ProcessedOrder]
  updateProcessedOrder(where: ProcessedOrderWhereUniqueInput!, data: ProcessedOrderUpdateInput!): ProcessedOrder
  updateProcessedOrders(data: [ProcessedOrderUpdateArgs!]!): [ProcessedOrder]
  deleteProcessedOrder(where: ProcessedOrderWhereUniqueInput!): ProcessedOrder
  deleteProcessedOrders(where: [ProcessedOrderWhereUniqueInput!]!): [ProcessedOrder]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  variants(where: VariantWhereInput! = {}, orderBy: [VariantOrderByInput!]! = [], take: Int, skip: Int! = 0): [Variant!]
  variant(where: VariantWhereUniqueInput!): Variant
  variantsCount(where: VariantWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  processedOrders(where: ProcessedOrderWhereInput! = {}, orderBy: [ProcessedOrderOrderByInput!]! = [], take: Int, skip: Int! = 0): [ProcessedOrder!]
  processedOrder(where: ProcessedOrderWhereUniqueInput!): ProcessedOrder
  processedOrdersCount(where: ProcessedOrderWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
